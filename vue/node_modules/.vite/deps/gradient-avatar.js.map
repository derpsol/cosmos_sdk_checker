{
  "version": 3,
  "sources": ["../../string-hash/index.js", "../../hsl-triad/index.js", "../../hsl-rgb/index.js", "../../gradient-avatar/index.js", "dep:gradient-avatar"],
  "sourcesContent": ["\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n", "const hslTriad = (h, s, l) => {\r\n  return [\r\n    [h, s, l],\r\n    [(h + 120) % 360, s, l],\r\n    [(h + 240) % 360, s, l],\r\n  ]\r\n};\r\n\r\nmodule.exports = hslTriad;", "const hue = (p, q, t) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1/6) return p + (q - p) * 6 * t;\n  if (t < 1/2) return q;\n  if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n\n  return p;\n}\n\nconst hslRgb = (h, s, l) => {\n  let r, g, b;\n  h = h / 360;\n\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n\n    r = hue(p, q, h + 1/3);\n    g = hue(p, q, h);\n    b = hue(p, q, h - 1/3);\n  }\n\n  return [\n    Math.max(0, Math.min(Math.round(r * 255), 255)),\n    Math.max(0, Math.min(Math.round(g * 255), 255)),\n    Math.max(0, Math.min(Math.round(b * 255), 255)) \n  ];\n};\n\nmodule.exports = hslRgb;", "const stringHash = require('string-hash');\r\nconst hslTriad = require('hsl-triad');\r\nconst hslRgb = require('hsl-rgb');\r\n\r\nconst uniqueID = () => Math.floor(Math.random() * Date.now());\r\n\r\nconst avatar = (str, size) => {\r\n  const hash = stringHash(str);\r\n  const colors = hslTriad(hash % 360, 1, 0.5);\r\n  const color1 = hslRgb(colors[0][0], colors[0][1], colors[0][2]);\r\n  const color2 = hslRgb(colors[1][0], colors[1][1], colors[1][2]);\r\n  const color1str = `rgb(${ color1[0] }, ${ color1[1] }, ${ color1[2] })`;\r\n  const color2str = `rgb(${ color2[0] }, ${ color2[1] }, ${ color2[2] })`;\r\n  const id = uniqueID();\r\n\r\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<svg ${ size != undefined ? `width=\"${size}px\" height=\"${size}px\"` : '' } viewBox=\"0 0 80 80\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n  <defs>\r\n    <linearGradient x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" id=\"${id}\">\r\n      <stop stop-color=\"${color1str}\" offset=\"0%\"></stop>\r\n      <stop stop-color=\"${color2str}\" offset=\"100%\"></stop>\r\n    </linearGradient>\r\n  </defs>\r\n  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n    <rect id=\"Rectangle\" fill=\"url(#${id})\" x=\"0\" y=\"0\" width=\"80\" height=\"80\"></rect>\r\n  </g>\r\n</svg>`;\r\n};\r\n\r\nmodule.exports = avatar;\r\n", "export default require(\"./node_modules/gradient-avatar/index.js\");"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAAA;AAEA,aAAS,KAAK,KAAK;AACjB,UAAIA,QAAO,MACP,IAAO,IAAI;AAEf,aAAM,GAAG;AACP,QAAAA,QAAQA,QAAO,KAAM,IAAI,WAAW,EAAE,CAAC;AAAA,MACzC;AAKA,aAAOA,UAAS;AAAA,IAClB;AAEA,WAAO,UAAU;AAAA;AAAA;;;AChBjB;AAAA;AAAA;AAAA,QAAM,WAAW,CAAC,GAAG,GAAG,MAAM;AAC5B,aAAO;AAAA,QACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACR,EAAE,IAAI,OAAO,KAAK,GAAG,CAAC;AAAA,QACtB,EAAE,IAAI,OAAO,KAAK,GAAG,CAAC;AAAA,MACxB;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACRjB;AAAA;AAAA;AAAA,QAAM,MAAM,CAAC,GAAG,GAAG,MAAM;AACvB,UAAI,IAAI;AAAG,aAAK;AAChB,UAAI,IAAI;AAAG,aAAK;AAChB,UAAI,IAAI,IAAE;AAAG,eAAO,KAAK,IAAI,KAAK,IAAI;AACtC,UAAI,IAAI,IAAE;AAAG,eAAO;AACpB,UAAI,IAAI,IAAE;AAAG,eAAO,KAAK,IAAI,MAAM,IAAE,IAAI,KAAK;AAE9C,aAAO;AAAA,IACT;AAEA,QAAM,SAAS,CAAC,GAAG,GAAG,MAAM;AAC1B,UAAI,GAAG,GAAG;AACV,UAAI,IAAI;AAER,UAAI,KAAK,GAAG;AACV,YAAI,IAAI,IAAI;AAAA,MACd,OAAO;AACL,cAAM,IAAI,IAAI,MAAM,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI;AAC9C,cAAM,IAAI,IAAI,IAAI;AAElB,YAAI,IAAI,GAAG,GAAG,IAAI,IAAE,CAAC;AACrB,YAAI,IAAI,GAAG,GAAG,CAAC;AACf,YAAI,IAAI,GAAG,GAAG,IAAI,IAAE,CAAC;AAAA,MACvB;AAEA,aAAO;AAAA,QACL,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,QAC9C,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,QAC9C,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,MAChD;AAAA,IACF;AAEA,WAAO,UAAU;AAAA;AAAA;;;AChCjB;AAAA;AAAA;AAAA,QAAM,aAAa;AACnB,QAAM,WAAW;AACjB,QAAM,SAAS;AAEf,QAAM,WAAW,MAAM,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI,CAAC;AAE5D,QAAM,SAAS,CAAC,KAAK,SAAS;AAC5B,YAAM,OAAO,WAAW,GAAG;AAC3B,YAAM,SAAS,SAAS,OAAO,KAAK,GAAG,GAAG;AAC1C,YAAM,SAAS,OAAO,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,EAAE;AAC9D,YAAM,SAAS,OAAO,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,EAAE;AAC9D,YAAM,YAAY,OAAQ,OAAO,OAAS,OAAO,OAAS,OAAO;AACjE,YAAM,YAAY,OAAQ,OAAO,OAAS,OAAO,OAAS,OAAO;AACjE,YAAM,KAAK,SAAS;AAEpB,aAAO;AAAA,OACD,QAAQ,SAAY,UAAU,mBAAmB,YAAY;AAAA;AAAA,8DAEP;AAAA,0BACpC;AAAA,0BACA;AAAA;AAAA;AAAA;AAAA,sCAIY;AAAA;AAAA;AAAA,IAGtC;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC7BjB;AAAA,IAAO,0BAAQ;",
  "names": ["hash"]
}
